import { Aes, PrivateKey, PublicKey } from 'bitsharesjs';

function deriveMemoPrivKeyFromPassword(address: string, password: string): PrivateKey {
  // In bitsharesjs, the memo key derivation is done using the address and password.
  // The seed is generated by concatenating the address, the string "memo", and the password.

  const seed = `${address}memo${password}`;
  const privKey = PrivateKey.fromSeed(seed);

  return privKey;
}

function decryptMemo(
  address: string,
  password: string,
  memo: {
    to: string;
    from: string;
    nonce: string;
    message: string;
  }
): string {
  // Decrypts a BitShares memo using the provided address, password, and memo object,
  // only works if the memo was encrypted using the same address and password.

  const formattedPrivKey = deriveMemoPrivKeyFromPassword(address, password);
  const pubKey = PublicKey.fromStringOrThrow(memo.from);

  // Decrypting the memo message using the derived private key and public key
  const decryptedBuffer = Aes.decrypt_with_checksum(formattedPrivKey, pubKey, memo.nonce, memo.message);
  const decryptedString = decryptedBuffer.toString('utf8');

  return decryptedString;
}

export { deriveMemoPrivKeyFromPassword, decryptMemo };
